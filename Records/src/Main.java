public class Main {

    //Records
    /*
        - encapsulated classes, but without the boilerplate code
        - the encapsulation is secured
        - constructor, getters, tpString(), equals() and hashCode() are generated
        - records CANNOT have explicit instance fields
        - records can have static fields and methods
        - records can have instance methods
    */

    public record  Hello(String greet){};

    public  record  Student2 (String fName, String LName, int Id){};
    public static void main(String[] args){
        var theStudent = new Student2("Joe", "Hopkins", 4);
        System.out.println(theStudent.fName());
        System.out.println();

        //toString() is also implemented
        System.out.println(theStudent);
        System.out.println();

        //equals() is also implemented
        var theStudent2 = new Student2("Joe", "Hopkins", 4);
        System.out.println(theStudent2 == theStudent); //false - point to different memory
        System.out.println(theStudent2.equals(theStudent)); //true

        var greeting = new Hello("Hi!");
        System.out.println(greeting.greet());
        System.out.println();

//        var theStudent3 = new Student3("Sam", "Johnson", 3);
        var theStudent03 = new Student3("Sam", "Johnson", 56);
        System.out.println(theStudent03.fname);
        System.out.println();

        var theStudent04 = new Student4("Sam", "Johnson", 56);
        System.out.println(theStudent04);
        System.out.println();

        var theStudent05 = new Student5("Sam", "Johnson", 56);
        System.out.println(theStudent05);
        System.out.println();


    }

    //can override autogenerated constructor
    //this is called canonical constructor
    public record Student3(String fname, String lname, int id){
        public Student3(String fname, String lname, int id){
            if (id< 10|| id> 1_000_000) throw new IllegalArgumentException();
            this.fname = fname;
            this.lname=lname;
            this.id = id;
        }
    }

    //there is a simpler way - compact constructor
    public record Student4(String fname, String lname, int id){
        public Student4{
            if (id< 10|| id> 1_000_000) throw new IllegalArgumentException();
        }
    }

    //edditing the fields
    public record Student5(String fname, String lname, int id){
        public Student5{
            if (id< 10|| id> 1_000_000) throw new IllegalArgumentException();
            fname = fname.substring(0, 1).toUpperCase();
            lname = lname.toUpperCase();
        }
    }
}
